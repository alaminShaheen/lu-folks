// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_CONNECTION_STRING")
}

enum AuthProvider {
  VANILLA
  GOOGLE
}

model Session {
  id           String @id @default(cuid())
  refreshToken String
  userId       String @unique // 1 -> 1
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  username         String
  password         String?
  imageUrl         String?
  authProvider     AuthProvider       @default(VANILLA)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  session          Session? // 1 -> 1
  createdGroups    Group[] // 1 -> n
  memberOfGroups   Group[]            @relation(name: "groupMembership") // n -> n
  createdPosts     Post[] // 1 -> n
  comments         Comment[] // 1 -> n
  commentReactions CommentReactions[] // n -> n
  postReactions    PostReactions[] // n -> n
}

model Group {
  id           String   @id @default(cuid())
  title        String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  creator      User     @relation(fields: [creatorId], references: [id]) // n -> 1
  creatorId    String
  groupMembers User[]   @relation(name: "groupMembership") // n -> n
  posts        Post[] // 1 -> n
}

model Post {
  id            String          @id @default(cuid())
  title         String
  content       Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt()
  creator       User            @relation(fields: [creatorId], references: [id]) // n -> 1
  creatorId     String
  group         Group           @relation(fields: [groupId], references: [id]) // n -> 1
  groupId       String
  comments      Comment[] // 1 -> n
  postReactions PostReactions[] // n -> n
}

model Comment {
  id               String             @id @default(cuid())
  comment          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  commenter        User               @relation(fields: [commenterId], references: [id]) // n -> 1
  commenterId      String
  post             Post               @relation(fields: [postId], references: [id]) // n -> 1
  postId           String
  commentReactions CommentReactions[] // n -> n
}

model PostReactions {
  user   User         @relation(fields: [userId], references: [id])
  userId String
  post   Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   ReactionType

  @@id([userId, postId])
}

model CommentReactions {
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment      @relation(fields: [commentId], references: [id])
  commentId String
  type      ReactionType

  @@id([userId, commentId])
}

enum ReactionType {
  LIKE
  UNLIKE
}
